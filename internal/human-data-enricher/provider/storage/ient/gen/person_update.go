// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ruslanSorokin/human-data-enricher/internal/human-data-enricher/provider/storage/ient/gen/person"
	"github.com/ruslanSorokin/human-data-enricher/internal/human-data-enricher/provider/storage/ient/gen/predicate"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PersonUpdate) SetUpdatedAt(t time.Time) *PersonUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *PersonUpdate) ClearUpdatedAt() *PersonUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PersonUpdate) SetDeletedAt(st sql.NullTime) *PersonUpdate {
	pu.mutation.SetDeletedAt(st)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableDeletedAt(st *sql.NullTime) *PersonUpdate {
	if st != nil {
		pu.SetDeletedAt(*st)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PersonUpdate) ClearDeletedAt() *PersonUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetSurname sets the "surname" field.
func (pu *PersonUpdate) SetSurname(s string) *PersonUpdate {
	pu.mutation.SetSurname(s)
	return pu
}

// SetMiddleName sets the "middle_name" field.
func (pu *PersonUpdate) SetMiddleName(ss sql.NullString) *PersonUpdate {
	pu.mutation.SetMiddleName(ss)
	return pu
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (pu *PersonUpdate) SetNillableMiddleName(ss *sql.NullString) *PersonUpdate {
	if ss != nil {
		pu.SetMiddleName(*ss)
	}
	return pu
}

// ClearMiddleName clears the value of the "middle_name" field.
func (pu *PersonUpdate) ClearMiddleName() *PersonUpdate {
	pu.mutation.ClearMiddleName()
	return pu
}

// SetAge sets the "age" field.
func (pu *PersonUpdate) SetAge(i int) *PersonUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PersonUpdate) AddAge(i int) *PersonUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetGender sets the "gender" field.
func (pu *PersonUpdate) SetGender(s string) *PersonUpdate {
	pu.mutation.SetGender(s)
	return pu
}

// SetNationality sets the "nationality" field.
func (pu *PersonUpdate) SetNationality(s string) *PersonUpdate {
	pu.mutation.SetNationality(s)
	return pu
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PersonUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		v := person.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Person.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Surname(); ok {
		if err := person.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`gen: validator failed for field "Person.surname": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Gender(); ok {
		if err := person.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`gen: validator failed for field "Person.gender": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Nationality(); ok {
		if err := person.NationalityValidator(v); err != nil {
			return &ValidationError{Name: "nationality", err: fmt.Errorf(`gen: validator failed for field "Person.nationality": %w`, err)}
		}
	}
	return nil
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(person.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(person.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(person.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(person.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(person.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Surname(); ok {
		_spec.SetField(person.FieldSurname, field.TypeString, value)
	}
	if value, ok := pu.mutation.MiddleName(); ok {
		_spec.SetField(person.FieldMiddleName, field.TypeString, value)
	}
	if pu.mutation.MiddleNameCleared() {
		_spec.ClearField(person.FieldMiddleName, field.TypeString)
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.SetField(person.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.AddField(person.FieldAge, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Gender(); ok {
		_spec.SetField(person.FieldGender, field.TypeString, value)
	}
	if value, ok := pu.mutation.Nationality(); ok {
		_spec.SetField(person.FieldNationality, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PersonUpdateOne) SetUpdatedAt(t time.Time) *PersonUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *PersonUpdateOne) ClearUpdatedAt() *PersonUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PersonUpdateOne) SetDeletedAt(st sql.NullTime) *PersonUpdateOne {
	puo.mutation.SetDeletedAt(st)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableDeletedAt(st *sql.NullTime) *PersonUpdateOne {
	if st != nil {
		puo.SetDeletedAt(*st)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PersonUpdateOne) ClearDeletedAt() *PersonUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetSurname sets the "surname" field.
func (puo *PersonUpdateOne) SetSurname(s string) *PersonUpdateOne {
	puo.mutation.SetSurname(s)
	return puo
}

// SetMiddleName sets the "middle_name" field.
func (puo *PersonUpdateOne) SetMiddleName(ss sql.NullString) *PersonUpdateOne {
	puo.mutation.SetMiddleName(ss)
	return puo
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableMiddleName(ss *sql.NullString) *PersonUpdateOne {
	if ss != nil {
		puo.SetMiddleName(*ss)
	}
	return puo
}

// ClearMiddleName clears the value of the "middle_name" field.
func (puo *PersonUpdateOne) ClearMiddleName() *PersonUpdateOne {
	puo.mutation.ClearMiddleName()
	return puo
}

// SetAge sets the "age" field.
func (puo *PersonUpdateOne) SetAge(i int) *PersonUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PersonUpdateOne) AddAge(i int) *PersonUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetGender sets the "gender" field.
func (puo *PersonUpdateOne) SetGender(s string) *PersonUpdateOne {
	puo.mutation.SetGender(s)
	return puo
}

// SetNationality sets the "nationality" field.
func (puo *PersonUpdateOne) SetNationality(s string) *PersonUpdateOne {
	puo.mutation.SetNationality(s)
	return puo
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (puo *PersonUpdateOne) Where(ps ...predicate.Person) *PersonUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PersonUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		v := person.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`gen: validator failed for field "Person.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Surname(); ok {
		if err := person.SurnameValidator(v); err != nil {
			return &ValidationError{Name: "surname", err: fmt.Errorf(`gen: validator failed for field "Person.surname": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Gender(); ok {
		if err := person.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`gen: validator failed for field "Person.gender": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Nationality(); ok {
		if err := person.NationalityValidator(v); err != nil {
			return &ValidationError{Name: "nationality", err: fmt.Errorf(`gen: validator failed for field "Person.nationality": %w`, err)}
		}
	}
	return nil
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(person.Table, person.Columns, sqlgraph.NewFieldSpec(person.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Person.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(person.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(person.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(person.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(person.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(person.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(person.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Surname(); ok {
		_spec.SetField(person.FieldSurname, field.TypeString, value)
	}
	if value, ok := puo.mutation.MiddleName(); ok {
		_spec.SetField(person.FieldMiddleName, field.TypeString, value)
	}
	if puo.mutation.MiddleNameCleared() {
		_spec.ClearField(person.FieldMiddleName, field.TypeString)
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.SetField(person.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.AddField(person.FieldAge, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Gender(); ok {
		_spec.SetField(person.FieldGender, field.TypeString, value)
	}
	if value, ok := puo.mutation.Nationality(); ok {
		_spec.SetField(person.FieldNationality, field.TypeString, value)
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
